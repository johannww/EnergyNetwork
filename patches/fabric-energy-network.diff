diff --git a/go.sum b/go.sum
index ab84afd3f..82699b571 100644
--- a/go.sum
+++ b/go.sum
@@ -101,14 +101,12 @@ github.com/golang/protobuf v1.3.1/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5y
 github.com/golang/protobuf v1.3.2/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/golang/protobuf v1.3.3 h1:gyjaxf+svBWX08ZjK86iN9geUJF0H6gp2IRKX6Nf6/I=
 github.com/golang/protobuf v1.3.3/go.mod h1:vzj43D7+SQXF/4pzW/hwtAqwc6iTitCiVSaWz5lYuqw=
-github.com/golang/snappy v0.0.1 h1:Qgr9rKW7uDUkrbSmQeiDsGa8SjGyCOGtuasMWwvp2P4=
 github.com/golang/snappy v0.0.1/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
 github.com/golang/snappy v0.0.2 h1:aeE13tS0IiQgFjYdoL8qN3K1N2bXXtI6Vi51/y7BpMw=
 github.com/golang/snappy v0.0.2/go.mod h1:/XxbfmMg8lxefKM7IXC3fBNl/7bRcc72aCRzEWrmP2Q=
 github.com/google/btree v0.0.0-20180124185431-e89373fe6b4a/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
 github.com/google/go-cmp v0.2.0/go.mod h1:oXzfMopK8JAjlY9xF4vHSVASa0yLyX7SntLO5aqRK0M=
 github.com/google/go-cmp v0.3.0/go.mod h1:8QqcDgzrUqlUb/G2PQTWiueGozuR1884gddMywk6iLU=
-github.com/google/go-cmp v0.4.0 h1:xsAVV57WRhGj6kEIi8ReJzQlHHqcBYCElAvkovg3B/4=
 github.com/google/go-cmp v0.4.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
 github.com/google/go-cmp v0.5.0 h1:/QaMHBdZ26BB3SSst0Iwl10Epc+xhTquomWX0oZEB6w=
 github.com/google/go-cmp v0.5.0/go.mod h1:v8dTdLbMG2kIc/vJvl+f65V22dbkXbowE6jgT/gNBxE=
@@ -314,7 +312,6 @@ golang.org/x/net v0.0.0-20190311183353-d8887717615a/go.mod h1:t9HGtf8HONx5eT2rtn
 golang.org/x/net v0.0.0-20190404232315-eb5bcb51f2a3/go.mod h1:t9HGtf8HONx5eT2rtn7q6eTqICYqUVnKs3thJo3Qplg=
 golang.org/x/net v0.0.0-20190522155817-f3200d17e092/go.mod h1:HSz+uSET+XFnRR8LxR5pz3Of3rY3CfYBVs4xY44aLks=
 golang.org/x/net v0.0.0-20190613194153-d28f0bde5980/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
-golang.org/x/net v0.0.0-20190620200207-3b0461eec859 h1:R/3boaszxrf1GEUWTVDzSKVwLmSJpwZ1yqXm8j0v2QI=
 golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
 golang.org/x/net v0.0.0-20200813134508-3edf25e44fcc h1:zK/HqS5bZxDptfPJNq8v7vJfXtkU7r9TLIoSr1bXaP4=
 golang.org/x/net v0.0.0-20200813134508-3edf25e44fcc/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=
@@ -374,7 +371,6 @@ gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkep
 gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
 gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
-gopkg.in/yaml.v2 v2.2.4 h1:/eiJrUcujPVeJ3xlSWaiNi3uSVmDGBK1pDHUHAnao1I=
 gopkg.in/yaml.v2 v2.2.4/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
 gopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=
 gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
diff --git a/images/ccenv/Dockerfile b/images/ccenv/Dockerfile
index 1553fddf4..bc18e3468 100644
--- a/images/ccenv/Dockerfile
+++ b/images/ccenv/Dockerfile
@@ -6,6 +6,7 @@ ARG GO_VER
 ARG ALPINE_VER
 FROM golang:${GO_VER}-alpine${ALPINE_VER}
 RUN apk add --no-cache \
+	binutils-gold \
 	g++ \
 	gcc \
 	git \
diff --git a/images/orderer/Dockerfile b/images/orderer/Dockerfile
index 1ca6adf0f..44e02f51d 100644
--- a/images/orderer/Dockerfile
+++ b/images/orderer/Dockerfile
@@ -13,6 +13,7 @@ RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
 
 FROM golang:${GO_VER}-alpine${ALPINE_VER} as golang
 RUN apk add --no-cache \
+	binutils-gold \
 	gcc \
 	musl-dev \
 	git \
diff --git a/images/peer/Dockerfile b/images/peer/Dockerfile
index 5ce9da479..cfbbe6ffa 100644
--- a/images/peer/Dockerfile
+++ b/images/peer/Dockerfile
@@ -15,6 +15,7 @@ RUN echo 'hosts: files dns' > /etc/nsswitch.conf
 FROM golang:${GO_VER}-alpine${ALPINE_VER} as golang
 RUN apk add --no-cache \
 	bash \
+	binutils-gold \
 	gcc \
 	git \
 	make \
diff --git a/images/tools/Dockerfile b/images/tools/Dockerfile
index eb3c154ba..46e3c81be 100644
--- a/images/tools/Dockerfile
+++ b/images/tools/Dockerfile
@@ -8,6 +8,7 @@ FROM golang:${GO_VER}-alpine${ALPINE_VER} as golang
 
 RUN apk add --no-cache \
 	bash \
+	binutils-gold \
 	gcc \
 	git \
 	make \
diff --git a/orderer/consensus/etcdraft/blockcreator.go b/orderer/consensus/etcdraft/blockcreator.go
index 2475e329c..61a0fc6bd 100644
--- a/orderer/consensus/etcdraft/blockcreator.go
+++ b/orderer/consensus/etcdraft/blockcreator.go
@@ -7,8 +7,11 @@ SPDX-License-Identifier: Apache-2.0
 package etcdraft
 
 import (
+	"sort"
+
 	"github.com/golang/protobuf/proto"
 	cb "github.com/hyperledger/fabric-protos-go/common"
+	"github.com/hyperledger/fabric-protos-go/peer"
 	"github.com/hyperledger/fabric/common/flogging"
 	"github.com/hyperledger/fabric/protoutil"
 )
@@ -28,6 +31,10 @@ func (bc *blockCreator) createNextBlock(envs []*cb.Envelope) *cb.Block {
 	}
 
 	var err error
+
+	//Sorting Enevelopes to form block
+	envs, err = bc.sortEnvelopesByTransactionPriority(envs)
+
 	for i, env := range envs {
 		data.Data[i], err = proto.Marshal(env)
 		if err != nil {
@@ -44,3 +51,78 @@ func (bc *blockCreator) createNextBlock(envs []*cb.Envelope) *cb.Block {
 	bc.hash = protoutil.BlockHeaderHash(block.Header)
 	return block
 }
+
+//JOHANN added method
+func (bc *blockCreator) sortEnvelopesByTransactionPriority(envs []*cb.Envelope) ([]*cb.Envelope, error) {
+	envPriority := make(map[*cb.Envelope]peer.Priority)
+
+	for _, env := range envs {
+		payload, err := protoutil.UnmarshalPayload(env.GetPayload())
+		if err != nil {
+			return nil, err
+		}
+
+		header := payload.GetHeader()
+		channelHeader, err := protoutil.UnmarshalChannelHeader(header.GetChannelHeader())
+		if err != nil {
+			return nil, err
+		}
+
+		//read priority only for the endorser transaction type
+		if channelHeader.GetType() == int32(cb.HeaderType_ENDORSER_TRANSACTION) {
+			transaction, err := protoutil.UnmarshalTransaction(payload.GetData())
+			if err != nil {
+				return nil, err
+			}
+
+			priority, err := bc.getPriorityFromTransaction(transaction)
+			if err != nil {
+				return nil, err
+			}
+
+			envPriority[env] = priority
+		} else { //give high priority to other types of transaction
+			envPriority[env] = peer.Priority_HIGH
+		}
+	}
+
+	//sort transactions mantaining stability
+	sort.SliceStable(envs[:], func(i, j int) bool {
+		return envPriority[envs[i]] < envPriority[envs[j]]
+	})
+
+	return envs, nil
+}
+
+//JOHANN added method
+func (bc *blockCreator) getPriorityFromTransaction(transaction *peer.Transaction) (peer.Priority, error) {
+	highestActionPriority := peer.Priority_LOW
+
+	transactionActions := transaction.GetActions()
+	for _, transactionAction := range transactionActions {
+
+		chaincodeActionPayload, err := protoutil.UnmarshalChaincodeActionPayload(transactionAction.GetPayload())
+		if err != nil {
+			return highestActionPriority, err
+		}
+
+		chaincodeEndorsedAction := chaincodeActionPayload.GetAction()
+		proposalResponsePayload, err := protoutil.UnmarshalProposalResponsePayload(chaincodeEndorsedAction.GetProposalResponsePayload())
+		if err != nil {
+			return highestActionPriority, err
+		}
+
+		chaincodeAction, err := protoutil.UnmarshalChaincodeAction(proposalResponsePayload.GetExtension())
+		if err != nil {
+			return highestActionPriority, err
+		}
+
+		priority := chaincodeAction.GetResponse().GetPriority()
+
+		// 0 is the highest priority. 1 is the medium priority.
+		if priority < highestActionPriority {
+			highestActionPriority = priority
+		}
+	}
+	return highestActionPriority, nil
+}
diff --git a/vendor/github.com/hyperledger/fabric-chaincode-go/shim/response.go b/vendor/github.com/hyperledger/fabric-chaincode-go/shim/response.go
index abe628669..4d305a17a 100644
--- a/vendor/github.com/hyperledger/fabric-chaincode-go/shim/response.go
+++ b/vendor/github.com/hyperledger/fabric-chaincode-go/shim/response.go
@@ -24,6 +24,18 @@ func Success(payload []byte) pb.Response {
 	return pb.Response{
 		Status:  OK,
 		Payload: payload,
+		//JOHANN PRIORITY
+		Priority: pb.Priority_MEDIUM,
+	}
+}
+
+//SuccessWithPriority with setting transaction priority
+func SuccessWithPriority(payload []byte, transactionPriority pb.Priority) pb.Response {
+	return pb.Response{
+		Status:  OK,
+		Payload: payload,
+		//JOHANN PRIORITY
+		Priority: transactionPriority,
 	}
 }
 
diff --git a/vendor/github.com/hyperledger/fabric-protos-go/peer/proposal_response.pb.go b/vendor/github.com/hyperledger/fabric-protos-go/peer/proposal_response.pb.go
index a133e4edb..04e242ebd 100644
--- a/vendor/github.com/hyperledger/fabric-protos-go/peer/proposal_response.pb.go
+++ b/vendor/github.com/hyperledger/fabric-protos-go/peer/proposal_response.pb.go
@@ -21,6 +21,35 @@ var _ = math.Inf
 // proto package needs to be updated.
 const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package
 
+//JOHANN Priority Enum for transactions
+type Priority int32
+
+const (
+	Priority_HIGH   Priority = 0
+	Priority_MEDIUM Priority = 1
+	Priority_LOW    Priority = 2
+)
+
+var Priority_name = map[int32]string{
+	0: "HIGH",
+	1: "MEDIUM",
+	2: "LOW",
+}
+
+var Priority_value = map[string]int32{
+	"HIGH":   0,
+	"MEDIUM": 1,
+	"LOW":    2,
+}
+
+func (x Priority) String() string {
+	return proto.EnumName(Priority_name, int32(x))
+}
+
+func (Priority) EnumDescriptor() ([]byte, []int) {
+	return fileDescriptor_2ed51030656d961a, []int{0}
+}
+
 // A ProposalResponse is returned from an endorser to the proposal submitter.
 // The idea is that this message contains the endorser's response to the
 // request of a client to perform an action over a chaincode (or more
@@ -116,7 +145,9 @@ type Response struct {
 	// A message associated with the response code.
 	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
 	// A payload that can be used to include metadata with this response.
-	Payload              []byte   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
+	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
+	//JOHANN a priority set by the chaincode return to be set in the ProposalResponsePayload
+	Priority             Priority `protobuf:"varint,4,opt,name=priority,proto3,enum=protos.Priority" json:"priority,omitempty"`
 	XXX_NoUnkeyedLiteral struct{} `json:"-"`
 	XXX_unrecognized     []byte   `json:"-"`
 	XXX_sizecache        int32    `json:"-"`
@@ -168,6 +199,13 @@ func (m *Response) GetPayload() []byte {
 	return nil
 }
 
+func (m *Response) GetPriority() Priority {
+	if m != nil {
+		return m.Priority
+	}
+	return Priority_HIGH
+}
+
 // ProposalResponsePayload is the payload of a proposal response.  This message
 // is the "bridge" between the client's request and the endorser's action in
 // response to that request. Concretely, for chaincodes, it contains a hashed
@@ -290,6 +328,7 @@ func (m *Endorsement) GetSignature() []byte {
 }
 
 func init() {
+	proto.RegisterEnum("protos.Priority", Priority_name, Priority_value)
 	proto.RegisterType((*ProposalResponse)(nil), "protos.ProposalResponse")
 	proto.RegisterType((*Response)(nil), "protos.Response")
 	proto.RegisterType((*ProposalResponsePayload)(nil), "protos.ProposalResponsePayload")
@@ -299,29 +338,32 @@ func init() {
 func init() { proto.RegisterFile("peer/proposal_response.proto", fileDescriptor_2ed51030656d961a) }
 
 var fileDescriptor_2ed51030656d961a = []byte{
-	// 371 bytes of a gzipped FileDescriptorProto
-	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x6b, 0xe3, 0x30,
-	0x10, 0x85, 0x71, 0x76, 0x93, 0x4d, 0x94, 0x2c, 0x04, 0x2f, 0xec, 0x9a, 0x10, 0xd8, 0xe0, 0x5e,
-	0x72, 0x48, 0x64, 0x68, 0x29, 0xf4, 0x1c, 0x28, 0xed, 0x31, 0x88, 0xd2, 0x43, 0x29, 0x14, 0x39,
-	0x99, 0xc8, 0x26, 0xb6, 0x25, 0x34, 0x72, 0x69, 0x7e, 0x70, 0xff, 0x47, 0xb1, 0x6c, 0x39, 0x6e,
-	0xe9, 0xc9, 0xbc, 0xf1, 0xd3, 0x37, 0xf3, 0x46, 0x22, 0x73, 0x05, 0xa0, 0x23, 0xa5, 0xa5, 0x92,
-	0xc8, 0xb3, 0x17, 0x0d, 0xa8, 0x64, 0x81, 0x40, 0x95, 0x96, 0x46, 0xfa, 0x03, 0xfb, 0xc1, 0xd9,
-	0x7f, 0x21, 0xa5, 0xc8, 0x20, 0xb2, 0x32, 0x2e, 0x0f, 0x91, 0x49, 0x73, 0x40, 0xc3, 0x73, 0x55,
-	0x1b, 0xc3, 0x77, 0x8f, 0x4c, 0xb7, 0x0d, 0x84, 0x35, 0x0c, 0x3f, 0x20, 0xbf, 0x5e, 0x41, 0x63,
-	0x2a, 0x8b, 0xc0, 0x5b, 0x78, 0xcb, 0x3e, 0x73, 0xd2, 0xbf, 0x21, 0xa3, 0x96, 0x10, 0xf4, 0x16,
-	0xde, 0x72, 0x7c, 0x39, 0xa3, 0x75, 0x0f, 0xea, 0x7a, 0xd0, 0x07, 0xe7, 0x60, 0x67, 0xb3, 0xbf,
-	0x22, 0x43, 0x37, 0x63, 0xf0, 0xd3, 0x1e, 0x9c, 0xd6, 0x27, 0x90, 0xba, 0xbe, 0xac, 0x75, 0x54,
-	0x13, 0x28, 0x7e, 0xca, 0x24, 0xdf, 0x07, 0xfd, 0x85, 0xb7, 0x9c, 0x30, 0x27, 0xfd, 0x6b, 0x32,
-	0x86, 0x62, 0x2f, 0x35, 0x42, 0x0e, 0x85, 0x09, 0x06, 0x16, 0xf5, 0xc7, 0xa1, 0x6e, 0xcf, 0xbf,
-	0x58, 0xd7, 0x17, 0x3e, 0x92, 0x61, 0x1b, 0xef, 0x2f, 0x19, 0xa0, 0xe1, 0xa6, 0xc4, 0x26, 0x5d,
-	0xa3, 0xaa, 0xa6, 0x39, 0x20, 0x72, 0x01, 0x36, 0xda, 0x88, 0x39, 0xd9, 0x1d, 0xe7, 0xc7, 0xa7,
-	0x71, 0xc2, 0x67, 0xf2, 0xef, 0xeb, 0xfa, 0xb6, 0xcd, 0xa4, 0x17, 0xe4, 0x77, 0x7b, 0x3d, 0x09,
-	0xc7, 0xc4, 0x76, 0x9b, 0xb0, 0x89, 0x2b, 0xde, 0x73, 0x4c, 0xfc, 0x39, 0x19, 0xc1, 0x9b, 0x81,
-	0xc2, 0x2e, 0xbb, 0x67, 0x0d, 0xe7, 0x42, 0x78, 0x47, 0xc6, 0x9d, 0x44, 0xfe, 0x8c, 0x0c, 0x9b,
-	0x4c, 0xba, 0x81, 0xb5, 0xba, 0x02, 0x61, 0x2a, 0x0a, 0x6e, 0x4a, 0x0d, 0x0e, 0xd4, 0x16, 0x36,
-	0x47, 0x12, 0x4a, 0x2d, 0x68, 0x72, 0x52, 0xa0, 0x33, 0xd8, 0x0b, 0xd0, 0xf4, 0xc0, 0x63, 0x9d,
-	0xee, 0xdc, 0xe2, 0xaa, 0xd7, 0xb4, 0xf9, 0x26, 0xca, 0xee, 0xc8, 0x05, 0x3c, 0xad, 0x44, 0x6a,
-	0x92, 0x32, 0xa6, 0x3b, 0x99, 0x47, 0x1d, 0x46, 0x54, 0x33, 0xd6, 0x35, 0x63, 0x2d, 0x64, 0x54,
-	0x61, 0xe2, 0xfa, 0xf1, 0x5d, 0x7d, 0x04, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xd6, 0x97, 0x69, 0xa3,
-	0x02, 0x00, 0x00,
+	// 427 bytes of a gzipped FileDescriptorProto
+	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xd1, 0x8b, 0x13, 0x31,
+	0x10, 0xc6, 0xdd, 0xde, 0x5d, 0x6f, 0x3b, 0xad, 0xb2, 0x44, 0xd0, 0xa5, 0x1c, 0x58, 0xd6, 0x97,
+	0x2a, 0xbd, 0x2c, 0x28, 0x82, 0xcf, 0x87, 0xc7, 0xf5, 0xc0, 0xc3, 0x12, 0x14, 0x41, 0x04, 0x49,
+	0xdb, 0xb9, 0xec, 0xd2, 0xee, 0x26, 0x24, 0xa9, 0xd8, 0x77, 0xff, 0x55, 0xff, 0x0f, 0xd9, 0x6c,
+	0xb2, 0xad, 0x72, 0x4f, 0xcb, 0xcc, 0x7e, 0xf9, 0xcd, 0xf7, 0x4d, 0x02, 0x17, 0x0a, 0x51, 0xe7,
+	0x4a, 0x4b, 0x25, 0x0d, 0xdf, 0xfe, 0xd0, 0x68, 0x94, 0xac, 0x0d, 0x52, 0xa5, 0xa5, 0x95, 0xa4,
+	0xef, 0x3e, 0x66, 0xfc, 0x42, 0x48, 0x29, 0xb6, 0x98, 0xbb, 0x72, 0xb9, 0xbb, 0xcf, 0x6d, 0x59,
+	0xa1, 0xb1, 0xbc, 0x52, 0xad, 0x30, 0xfb, 0x13, 0x41, 0xb2, 0xf0, 0x10, 0xe6, 0x19, 0x24, 0x85,
+	0xf3, 0x9f, 0xa8, 0x4d, 0x29, 0xeb, 0x34, 0x9a, 0x44, 0xd3, 0x33, 0x16, 0x4a, 0xf2, 0x1e, 0x06,
+	0x1d, 0x21, 0xed, 0x4d, 0xa2, 0xe9, 0xf0, 0xcd, 0x98, 0xb6, 0x33, 0x68, 0x98, 0x41, 0x3f, 0x07,
+	0x05, 0x3b, 0x88, 0xc9, 0x0c, 0xe2, 0xe0, 0x31, 0x3d, 0x75, 0x07, 0x93, 0xf6, 0x84, 0xa1, 0x61,
+	0x2e, 0xeb, 0x14, 0x8d, 0x03, 0xc5, 0xf7, 0x5b, 0xc9, 0xd7, 0xe9, 0xd9, 0x24, 0x9a, 0x8e, 0x58,
+	0x28, 0xc9, 0x3b, 0x18, 0x62, 0xbd, 0x96, 0xda, 0x60, 0x85, 0xb5, 0x4d, 0xfb, 0x0e, 0xf5, 0x34,
+	0xa0, 0xae, 0x0f, 0xbf, 0xd8, 0xb1, 0x2e, 0xfb, 0x1d, 0x41, 0xdc, 0xe5, 0x7b, 0x06, 0x7d, 0x63,
+	0xb9, 0xdd, 0x19, 0x1f, 0xcf, 0x57, 0xcd, 0xd4, 0x0a, 0x8d, 0xe1, 0x02, 0x5d, 0xb6, 0x01, 0x0b,
+	0xe5, 0xb1, 0x9f, 0x93, 0x7f, 0xfd, 0xcc, 0x20, 0x56, 0xba, 0x94, 0xba, 0xb4, 0x7b, 0x97, 0xeb,
+	0xc9, 0x21, 0xd7, 0xc2, 0xf7, 0x59, 0xa7, 0xc8, 0xbe, 0xc3, 0xf3, 0xff, 0xb7, 0xbd, 0xf0, 0xa0,
+	0x97, 0xf0, 0xb8, 0xbb, 0xcd, 0x82, 0x9b, 0xc2, 0x79, 0x1b, 0xb1, 0x51, 0x68, 0xce, 0xb9, 0x29,
+	0xc8, 0x05, 0x0c, 0xf0, 0x97, 0xc5, 0xda, 0xdd, 0x4d, 0xcf, 0x09, 0x0e, 0x8d, 0xec, 0x06, 0x86,
+	0x47, 0x0b, 0x20, 0x63, 0x88, 0xfd, 0x0a, 0xb4, 0x87, 0x75, 0x75, 0x03, 0x32, 0xa5, 0xa8, 0xb9,
+	0xdd, 0x69, 0x0c, 0xa0, 0xae, 0xf1, 0xfa, 0x15, 0xc4, 0xc1, 0x3c, 0x89, 0xe1, 0x74, 0x7e, 0x7b,
+	0x33, 0x4f, 0x1e, 0x11, 0x80, 0xfe, 0xdd, 0xf5, 0x87, 0xdb, 0x2f, 0x77, 0x49, 0x44, 0xce, 0xe1,
+	0xe4, 0xe3, 0xa7, 0xaf, 0x49, 0xef, 0x6a, 0x03, 0x99, 0xd4, 0x82, 0x16, 0x7b, 0x85, 0x7a, 0x8b,
+	0x6b, 0x81, 0x9a, 0xde, 0xf3, 0xa5, 0x2e, 0x57, 0x61, 0x0b, 0xcd, 0x3b, 0xbd, 0x7a, 0x20, 0xf5,
+	0x6a, 0xc3, 0x05, 0x7e, 0x9b, 0x89, 0xd2, 0x16, 0xbb, 0x25, 0x5d, 0xc9, 0x2a, 0x3f, 0x62, 0xe4,
+	0x2d, 0xe3, 0xb2, 0x65, 0x5c, 0x0a, 0x99, 0x37, 0x98, 0x65, 0xfb, 0xac, 0xdf, 0xfe, 0x0d, 0x00,
+	0x00, 0xff, 0xff, 0x49, 0x17, 0x81, 0x3d, 0xfd, 0x02, 0x00, 0x00,
 }
