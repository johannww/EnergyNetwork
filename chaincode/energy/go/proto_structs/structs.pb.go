// Code generated by protoc-gen-go. DO NOT EDIT.
// source: structs.proto

package proto_structs

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ActiveSensor struct {
	MspID                string   `protobuf:"bytes,1,opt,name=mspID,json=mspid,proto3" json:"mspID,omitempty"`
	SensorID             string   `protobuf:"bytes,2,opt,name=sensorID,json=sensorid,proto3" json:"sensorID,omitempty"`
	IsActive             bool     `protobuf:"varint,3,opt,name=isActive,json=active,proto3" json:"isActive,omitempty"`
	X                    int32    `protobuf:"fixed32,4,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"fixed32,5,opt,name=y,proto3" json:"y,omitempty"`
	Z                    int32    `protobuf:"fixed32,6,opt,name=z,proto3" json:"z,omitempty"`
	Radius               float64  `protobuf:"fixed64,7,opt,name=radius,proto3" json:"radius,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActiveSensor) Reset()         { *m = ActiveSensor{} }
func (m *ActiveSensor) String() string { return proto.CompactTextString(m) }
func (*ActiveSensor) ProtoMessage()    {}
func (*ActiveSensor) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{0}
}

func (m *ActiveSensor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActiveSensor.Unmarshal(m, b)
}
func (m *ActiveSensor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActiveSensor.Marshal(b, m, deterministic)
}
func (m *ActiveSensor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActiveSensor.Merge(m, src)
}
func (m *ActiveSensor) XXX_Size() int {
	return xxx_messageInfo_ActiveSensor.Size(m)
}
func (m *ActiveSensor) XXX_DiscardUnknown() {
	xxx_messageInfo_ActiveSensor.DiscardUnknown(m)
}

var xxx_messageInfo_ActiveSensor proto.InternalMessageInfo

func (m *ActiveSensor) GetMspID() string {
	if m != nil {
		return m.MspID
	}
	return ""
}

func (m *ActiveSensor) GetSensorID() string {
	if m != nil {
		return m.SensorID
	}
	return ""
}

func (m *ActiveSensor) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *ActiveSensor) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ActiveSensor) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *ActiveSensor) GetZ() int32 {
	if m != nil {
		return m.Z
	}
	return 0
}

func (m *ActiveSensor) GetRadius() float64 {
	if m != nil {
		return m.Radius
	}
	return 0
}

//SmartData struct with data from sensor
//SmartData aprox. memory size = 10 + 177 + 1 + 4 + 8 + 8 + 1 + 1 + 4 + 4 + 4 + 4 = 226 bytes
type SmartData struct {
	AssetID              string   `protobuf:"bytes,1,opt,name=assetID,json=assetid,proto3" json:"assetID,omitempty"`
	Version              int32    `protobuf:"fixed32,2,opt,name=version,proto3" json:"version,omitempty"`
	Unit                 uint32   `protobuf:"fixed32,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Timestamp            uint64   `protobuf:"fixed64,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value                float64  `protobuf:"fixed64,5,opt,name=value,proto3" json:"value,omitempty"`
	Error                uint32   `protobuf:"fixed32,6,opt,name=error,json=e,proto3" json:"error,omitempty"`
	Confidence           uint32   `protobuf:"fixed32,7,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Dev                  uint32   `protobuf:"fixed32,8,opt,name=dev,proto3" json:"dev,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SmartData) Reset()         { *m = SmartData{} }
func (m *SmartData) String() string { return proto.CompactTextString(m) }
func (*SmartData) ProtoMessage()    {}
func (*SmartData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{1}
}

func (m *SmartData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SmartData.Unmarshal(m, b)
}
func (m *SmartData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SmartData.Marshal(b, m, deterministic)
}
func (m *SmartData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SmartData.Merge(m, src)
}
func (m *SmartData) XXX_Size() int {
	return xxx_messageInfo_SmartData.Size(m)
}
func (m *SmartData) XXX_DiscardUnknown() {
	xxx_messageInfo_SmartData.DiscardUnknown(m)
}

var xxx_messageInfo_SmartData proto.InternalMessageInfo

func (m *SmartData) GetAssetID() string {
	if m != nil {
		return m.AssetID
	}
	return ""
}

func (m *SmartData) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *SmartData) GetUnit() uint32 {
	if m != nil {
		return m.Unit
	}
	return 0
}

func (m *SmartData) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SmartData) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SmartData) GetError() uint32 {
	if m != nil {
		return m.Error
	}
	return 0
}

func (m *SmartData) GetConfidence() uint32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *SmartData) GetDev() uint32 {
	if m != nil {
		return m.Dev
	}
	return 0
}

//SellerInfo stores information regarding the seller in terms of
//energy generated, generation gear and coin balance
//SellerInfo aprox. memory size = 10 + 177 + 10 + 177 + 4 + 4 + (len(EnergyTypes)*(8 + 10)) + 8 + 8 + 4 = 492 bytes
type SellerInfo struct {
	MspIDSeller             string             `protobuf:"bytes,1,opt,name=mspIDSeller,json=mspseller,proto3" json:"mspIDSeller,omitempty"`
	SellerID                string             `protobuf:"bytes,2,opt,name=sellerID,json=sellerid,proto3" json:"sellerID,omitempty"`
	MspIDSmartMeter         string             `protobuf:"bytes,3,opt,name=mspIDSmartMeter,json=mspsmartmeter,proto3" json:"mspIDSmartMeter,omitempty"`
	SmartMeterID            string             `protobuf:"bytes,4,opt,name=smartMeterID,json=smartmeterid,proto3" json:"smartMeterID,omitempty"`
	WindTurbinesNumber      uint64             `protobuf:"fixed64,5,opt,name=windTurbinesNumber,json=windturbinesnumber,proto3" json:"windTurbinesNumber,omitempty"`
	SolarPanelsNumber       uint64             `protobuf:"fixed64,6,opt,name=solarPanelsNumber,json=solarpanelsnumber,proto3" json:"solarPanelsNumber,omitempty"`
	EnergyToSellByType      map[string]float64 `protobuf:"bytes,7,rep,name=energyToSellByType,json=energytosell,proto3" json:"energyToSellByType,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	LastGenerationTimestamp uint64             `protobuf:"fixed64,8,opt,name=lastGenerationTimestamp,json=lastgenerationtimestamp,proto3" json:"lastGenerationTimestamp,omitempty"`
	LastBidID               uint64             `protobuf:"fixed64,9,opt,name=lastBidID,json=lastbid,proto3" json:"lastBidID,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}           `json:"-"`
	XXX_unrecognized        []byte             `json:"-"`
	XXX_sizecache           int32              `json:"-"`
}

func (m *SellerInfo) Reset()         { *m = SellerInfo{} }
func (m *SellerInfo) String() string { return proto.CompactTextString(m) }
func (*SellerInfo) ProtoMessage()    {}
func (*SellerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{2}
}

func (m *SellerInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SellerInfo.Unmarshal(m, b)
}
func (m *SellerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SellerInfo.Marshal(b, m, deterministic)
}
func (m *SellerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellerInfo.Merge(m, src)
}
func (m *SellerInfo) XXX_Size() int {
	return xxx_messageInfo_SellerInfo.Size(m)
}
func (m *SellerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SellerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SellerInfo proto.InternalMessageInfo

func (m *SellerInfo) GetMspIDSeller() string {
	if m != nil {
		return m.MspIDSeller
	}
	return ""
}

func (m *SellerInfo) GetSellerID() string {
	if m != nil {
		return m.SellerID
	}
	return ""
}

func (m *SellerInfo) GetMspIDSmartMeter() string {
	if m != nil {
		return m.MspIDSmartMeter
	}
	return ""
}

func (m *SellerInfo) GetSmartMeterID() string {
	if m != nil {
		return m.SmartMeterID
	}
	return ""
}

func (m *SellerInfo) GetWindTurbinesNumber() uint64 {
	if m != nil {
		return m.WindTurbinesNumber
	}
	return 0
}

func (m *SellerInfo) GetSolarPanelsNumber() uint64 {
	if m != nil {
		return m.SolarPanelsNumber
	}
	return 0
}

func (m *SellerInfo) GetEnergyToSellByType() map[string]float64 {
	if m != nil {
		return m.EnergyToSellByType
	}
	return nil
}

func (m *SellerInfo) GetLastGenerationTimestamp() uint64 {
	if m != nil {
		return m.LastGenerationTimestamp
	}
	return 0
}

func (m *SellerInfo) GetLastBidID() uint64 {
	if m != nil {
		return m.LastBidID
	}
	return 0
}

// MeterSeller was created so we could abdon CouchDB by adding a link from
// the MspIDSmartMeter+SmartMeterID pointing to the SellerInfo of the seller the
// meter belongs to.
// We found out that LevelDB with StateKey or KeyRange queries are 1000x faster than CouchDB JSON
// queries and 10x faster than CouchDB StateKey or KeyRange queries.
// Our intent was to substitute the query:  queryString := fmt.Sprintf(, meterMspID, meterID)
// in function: getSellerInfoRelatedToSmartMeter()
// So we had to create the MeterSeller to gain efficiency on database access
type MeterSeller struct {
	MspIDSeller          string   `protobuf:"bytes,1,opt,name=mspIDSeller,json=mspseller,proto3" json:"mspIDSeller,omitempty"`
	SellerID             string   `protobuf:"bytes,2,opt,name=sellerID,json=sellerid,proto3" json:"sellerID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MeterSeller) Reset()         { *m = MeterSeller{} }
func (m *MeterSeller) String() string { return proto.CompactTextString(m) }
func (*MeterSeller) ProtoMessage()    {}
func (*MeterSeller) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{3}
}

func (m *MeterSeller) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MeterSeller.Unmarshal(m, b)
}
func (m *MeterSeller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MeterSeller.Marshal(b, m, deterministic)
}
func (m *MeterSeller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeterSeller.Merge(m, src)
}
func (m *MeterSeller) XXX_Size() int {
	return xxx_messageInfo_MeterSeller.Size(m)
}
func (m *MeterSeller) XXX_DiscardUnknown() {
	xxx_messageInfo_MeterSeller.DiscardUnknown(m)
}

var xxx_messageInfo_MeterSeller proto.InternalMessageInfo

func (m *MeterSeller) GetMspIDSeller() string {
	if m != nil {
		return m.MspIDSeller
	}
	return ""
}

func (m *MeterSeller) GetSellerID() string {
	if m != nil {
		return m.SellerID
	}
	return ""
}

//SellBid stores information regarding the seller wish
//to sell a certain energy type.
//SellBid is used in the auction
//SellBid aprox. memory size = 1 + 10 + 177 + 4 + 8 + 8 + 10 = 218 bytes
type SellBid struct {
	MspIDSeller          string   `protobuf:"bytes,1,opt,name=mspIDSeller,json=mspseller,proto3" json:"mspIDSeller,omitempty"`
	SellerID             string   `protobuf:"bytes,2,opt,name=sellerID,json=sellerid,proto3" json:"sellerID,omitempty"`
	SellerBidNumber      uint64   `protobuf:"fixed64,3,opt,name=sellerBidNumber,json=sellerbidnumber,proto3" json:"sellerBidNumber,omitempty"`
	EnergyQuantityKWH    float64  `protobuf:"fixed64,4,opt,name=energyQuantityKWH,json=energyquantity,proto3" json:"energyQuantityKWH,omitempty"`
	PricePerKWH          float64  `protobuf:"fixed64,5,opt,name=pricePerKWH,json=priceperkwh,proto3" json:"pricePerKWH,omitempty"`
	EnergyType           string   `protobuf:"bytes,6,opt,name=energyType,json=energytype,proto3" json:"energyType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SellBid) Reset()         { *m = SellBid{} }
func (m *SellBid) String() string { return proto.CompactTextString(m) }
func (*SellBid) ProtoMessage()    {}
func (*SellBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{4}
}

func (m *SellBid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SellBid.Unmarshal(m, b)
}
func (m *SellBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SellBid.Marshal(b, m, deterministic)
}
func (m *SellBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellBid.Merge(m, src)
}
func (m *SellBid) XXX_Size() int {
	return xxx_messageInfo_SellBid.Size(m)
}
func (m *SellBid) XXX_DiscardUnknown() {
	xxx_messageInfo_SellBid.DiscardUnknown(m)
}

var xxx_messageInfo_SellBid proto.InternalMessageInfo

func (m *SellBid) GetMspIDSeller() string {
	if m != nil {
		return m.MspIDSeller
	}
	return ""
}

func (m *SellBid) GetSellerID() string {
	if m != nil {
		return m.SellerID
	}
	return ""
}

func (m *SellBid) GetSellerBidNumber() uint64 {
	if m != nil {
		return m.SellerBidNumber
	}
	return 0
}

func (m *SellBid) GetEnergyQuantityKWH() float64 {
	if m != nil {
		return m.EnergyQuantityKWH
	}
	return 0
}

func (m *SellBid) GetPricePerKWH() float64 {
	if m != nil {
		return m.PricePerKWH
	}
	return 0
}

func (m *SellBid) GetEnergyType() string {
	if m != nil {
		return m.EnergyType
	}
	return ""
}

//BuyBid is used in the auction
//BuyBid aprox. memory size = 10 + len(token) + 8 + 8 + 10 + 1 = 37 + len(token) bytes
type BuyBid struct {
	MspIDPaymentCompany  string   `protobuf:"bytes,1,opt,name=mspIDPaymentCompany,json=msppaymentcompany,proto3" json:"mspIDPaymentCompany,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	UtilityMspID         string   `protobuf:"bytes,3,opt,name=utilityMspID,json=utilityid,proto3" json:"utilityMspID,omitempty"`
	EnergyQuantityKWH    float64  `protobuf:"fixed64,4,opt,name=energyQuantityKWH,json=energyquantity,proto3" json:"energyQuantityKWH,omitempty"`
	PricePerKWH          float64  `protobuf:"fixed64,5,opt,name=pricePerKWH,json=priceperkwh,proto3" json:"pricePerKWH,omitempty"`
	EnergyType           string   `protobuf:"bytes,6,opt,name=energyType,json=energytype,proto3" json:"energyType,omitempty"`
	Validated            bool     `protobuf:"varint,7,opt,name=validated,proto3" json:"validated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuyBid) Reset()         { *m = BuyBid{} }
func (m *BuyBid) String() string { return proto.CompactTextString(m) }
func (*BuyBid) ProtoMessage()    {}
func (*BuyBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{5}
}

func (m *BuyBid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuyBid.Unmarshal(m, b)
}
func (m *BuyBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuyBid.Marshal(b, m, deterministic)
}
func (m *BuyBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyBid.Merge(m, src)
}
func (m *BuyBid) XXX_Size() int {
	return xxx_messageInfo_BuyBid.Size(m)
}
func (m *BuyBid) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyBid.DiscardUnknown(m)
}

var xxx_messageInfo_BuyBid proto.InternalMessageInfo

func (m *BuyBid) GetMspIDPaymentCompany() string {
	if m != nil {
		return m.MspIDPaymentCompany
	}
	return ""
}

func (m *BuyBid) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *BuyBid) GetUtilityMspID() string {
	if m != nil {
		return m.UtilityMspID
	}
	return ""
}

func (m *BuyBid) GetEnergyQuantityKWH() float64 {
	if m != nil {
		return m.EnergyQuantityKWH
	}
	return 0
}

func (m *BuyBid) GetPricePerKWH() float64 {
	if m != nil {
		return m.PricePerKWH
	}
	return 0
}

func (m *BuyBid) GetEnergyType() string {
	if m != nil {
		return m.EnergyType
	}
	return ""
}

func (m *BuyBid) GetValidated() bool {
	if m != nil {
		return m.Validated
	}
	return false
}

//EnergyTransaction is the result of a SellBid matched to a BuyBid after the auction
//EnergyTransaction aprox. memory size = 10 + 177 + 4 + 10 + len(token) + 8 + 8 + 10 = 227 + len(token) bytes
type EnergyTransaction struct {
	MspIDSeller          string   `protobuf:"bytes,1,opt,name=mspIDSeller,json=mspseller,proto3" json:"mspIDSeller,omitempty"`
	SellerID             string   `protobuf:"bytes,2,opt,name=sellerID,json=sellerid,proto3" json:"sellerID,omitempty"`
	SellerBidNumber      uint64   `protobuf:"fixed64,3,opt,name=sellerBidNumber,json=sellerbidnumber,proto3" json:"sellerBidNumber,omitempty"`
	MspIDPaymentCompany  string   `protobuf:"bytes,4,opt,name=mspIDPaymentCompany,json=msppaymentcompany,proto3" json:"mspIDPaymentCompany,omitempty"`
	Token                string   `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	BuyerUtilityMspID    string   `protobuf:"bytes,6,opt,name=buyerUtilityMspID,json=utilityid,proto3" json:"buyerUtilityMspID,omitempty"`
	EnergyQuantityKWH    float64  `protobuf:"fixed64,7,opt,name=energyQuantityKWH,json=energyquantity,proto3" json:"energyQuantityKWH,omitempty"`
	PricePerKWH          float64  `protobuf:"fixed64,8,opt,name=pricePerKWH,json=priceperkwh,proto3" json:"pricePerKWH,omitempty"`
	EnergyType           string   `protobuf:"bytes,9,opt,name=energyType,json=energytype,proto3" json:"energyType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnergyTransaction) Reset()         { *m = EnergyTransaction{} }
func (m *EnergyTransaction) String() string { return proto.CompactTextString(m) }
func (*EnergyTransaction) ProtoMessage()    {}
func (*EnergyTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{6}
}

func (m *EnergyTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnergyTransaction.Unmarshal(m, b)
}
func (m *EnergyTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnergyTransaction.Marshal(b, m, deterministic)
}
func (m *EnergyTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnergyTransaction.Merge(m, src)
}
func (m *EnergyTransaction) XXX_Size() int {
	return xxx_messageInfo_EnergyTransaction.Size(m)
}
func (m *EnergyTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_EnergyTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_EnergyTransaction proto.InternalMessageInfo

func (m *EnergyTransaction) GetMspIDSeller() string {
	if m != nil {
		return m.MspIDSeller
	}
	return ""
}

func (m *EnergyTransaction) GetSellerID() string {
	if m != nil {
		return m.SellerID
	}
	return ""
}

func (m *EnergyTransaction) GetSellerBidNumber() uint64 {
	if m != nil {
		return m.SellerBidNumber
	}
	return 0
}

func (m *EnergyTransaction) GetMspIDPaymentCompany() string {
	if m != nil {
		return m.MspIDPaymentCompany
	}
	return ""
}

func (m *EnergyTransaction) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *EnergyTransaction) GetBuyerUtilityMspID() string {
	if m != nil {
		return m.BuyerUtilityMspID
	}
	return ""
}

func (m *EnergyTransaction) GetEnergyQuantityKWH() float64 {
	if m != nil {
		return m.EnergyQuantityKWH
	}
	return 0
}

func (m *EnergyTransaction) GetPricePerKWH() float64 {
	if m != nil {
		return m.PricePerKWH
	}
	return 0
}

func (m *EnergyTransaction) GetEnergyType() string {
	if m != nil {
		return m.EnergyType
	}
	return ""
}

type FullToken struct {
	MspIDPaymentCompany  string   `protobuf:"bytes,1,opt,name=mspIDPaymentCompany,json=msppaymentcompany,proto3" json:"mspIDPaymentCompany,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FullToken) Reset()         { *m = FullToken{} }
func (m *FullToken) String() string { return proto.CompactTextString(m) }
func (*FullToken) ProtoMessage()    {}
func (*FullToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{7}
}

func (m *FullToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FullToken.Unmarshal(m, b)
}
func (m *FullToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FullToken.Marshal(b, m, deterministic)
}
func (m *FullToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullToken.Merge(m, src)
}
func (m *FullToken) XXX_Size() int {
	return xxx_messageInfo_FullToken.Size(m)
}
func (m *FullToken) XXX_DiscardUnknown() {
	xxx_messageInfo_FullToken.DiscardUnknown(m)
}

var xxx_messageInfo_FullToken proto.InternalMessageInfo

func (m *FullToken) GetMspIDPaymentCompany() string {
	if m != nil {
		return m.MspIDPaymentCompany
	}
	return ""
}

func (m *FullToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type SellBidEnergyTransactions struct {
	FullTokens           []*FullToken `protobuf:"bytes,1,rep,name=fullTokens,json=fulltokens,proto3" json:"fullTokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SellBidEnergyTransactions) Reset()         { *m = SellBidEnergyTransactions{} }
func (m *SellBidEnergyTransactions) String() string { return proto.CompactTextString(m) }
func (*SellBidEnergyTransactions) ProtoMessage()    {}
func (*SellBidEnergyTransactions) Descriptor() ([]byte, []int) {
	return fileDescriptor_e774e8f5f348d14d, []int{8}
}

func (m *SellBidEnergyTransactions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SellBidEnergyTransactions.Unmarshal(m, b)
}
func (m *SellBidEnergyTransactions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SellBidEnergyTransactions.Marshal(b, m, deterministic)
}
func (m *SellBidEnergyTransactions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SellBidEnergyTransactions.Merge(m, src)
}
func (m *SellBidEnergyTransactions) XXX_Size() int {
	return xxx_messageInfo_SellBidEnergyTransactions.Size(m)
}
func (m *SellBidEnergyTransactions) XXX_DiscardUnknown() {
	xxx_messageInfo_SellBidEnergyTransactions.DiscardUnknown(m)
}

var xxx_messageInfo_SellBidEnergyTransactions proto.InternalMessageInfo

func (m *SellBidEnergyTransactions) GetFullTokens() []*FullToken {
	if m != nil {
		return m.FullTokens
	}
	return nil
}

func init() {
	proto.RegisterType((*ActiveSensor)(nil), "protos.ActiveSensor")
	proto.RegisterType((*SmartData)(nil), "protos.SmartData")
	proto.RegisterType((*SellerInfo)(nil), "protos.SellerInfo")
	proto.RegisterMapType((map[string]float64)(nil), "protos.SellerInfo.EnergyToSellByTypeEntry")
	proto.RegisterType((*MeterSeller)(nil), "protos.MeterSeller")
	proto.RegisterType((*SellBid)(nil), "protos.SellBid")
	proto.RegisterType((*BuyBid)(nil), "protos.BuyBid")
	proto.RegisterType((*EnergyTransaction)(nil), "protos.EnergyTransaction")
	proto.RegisterType((*FullToken)(nil), "protos.FullToken")
	proto.RegisterType((*SellBidEnergyTransactions)(nil), "protos.SellBidEnergyTransactions")
}

func init() { proto.RegisterFile("structs.proto", fileDescriptor_e774e8f5f348d14d) }

var fileDescriptor_e774e8f5f348d14d = []byte{
	// 790 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcf, 0x8f, 0x1b, 0x35,
	0x14, 0x96, 0x37, 0xbb, 0x33, 0x99, 0x97, 0x2c, 0x69, 0x0c, 0xa2, 0xc3, 0x0a, 0x95, 0x68, 0x84,
	0x50, 0x40, 0x10, 0x09, 0xb8, 0x54, 0xdc, 0x08, 0x59, 0x20, 0x42, 0xad, 0xb6, 0xde, 0x20, 0x24,
	0x6e, 0x4e, 0xec, 0x2d, 0xd6, 0xce, 0x78, 0x06, 0xdb, 0x93, 0x76, 0xfa, 0xb7, 0xf0, 0x1f, 0x71,
	0xe3, 0xcc, 0x95, 0x7f, 0x82, 0x13, 0xf2, 0xb3, 0xf3, 0x43, 0x5a, 0x55, 0xad, 0x54, 0xd4, 0x53,
	0xfc, 0xbe, 0xef, 0x65, 0xe6, 0x7b, 0xdf, 0x7b, 0x7e, 0x03, 0xe7, 0xd6, 0x99, 0x76, 0xe3, 0xec,
	0xac, 0x31, 0xb5, 0xab, 0x69, 0x82, 0x3f, 0xb6, 0xf8, 0x83, 0xc0, 0xf0, 0xdb, 0x8d, 0x53, 0x5b,
	0x79, 0x2d, 0xb5, 0xad, 0x0d, 0x7d, 0x0f, 0xce, 0x2a, 0xdb, 0x2c, 0x17, 0x39, 0x99, 0x90, 0x69,
	0xc6, 0x7c, 0xa0, 0x04, 0xbd, 0x80, 0xbe, 0x45, 0x7e, 0xb9, 0xc8, 0x4f, 0x90, 0x88, 0xb1, 0x12,
	0x34, 0x87, 0xbe, 0xb2, 0xe1, 0x19, 0x79, 0x6f, 0x42, 0xa6, 0x7d, 0x96, 0x70, 0x8c, 0xe8, 0x10,
	0xc8, 0xf3, 0xfc, 0x74, 0x42, 0xa6, 0x23, 0x46, 0x9e, 0xfb, 0xa8, 0xcb, 0xcf, 0x42, 0xd4, 0xf9,
	0xe8, 0x45, 0x9e, 0x84, 0xe8, 0x05, 0x7d, 0x1f, 0x12, 0xc3, 0x85, 0x6a, 0x6d, 0x9e, 0x4e, 0xc8,
	0x94, 0xb0, 0x18, 0x15, 0x7f, 0x12, 0xc8, 0xae, 0x2b, 0x6e, 0xdc, 0x82, 0x3b, 0x4e, 0x73, 0x48,
	0xb9, 0xb5, 0xd2, 0xed, 0xd5, 0x85, 0x10, 0x35, 0xa4, 0x5b, 0x69, 0xac, 0xaa, 0x35, 0xca, 0x1b,
	0xb1, 0x5d, 0x48, 0x29, 0x9c, 0xb6, 0x5a, 0x39, 0x54, 0x96, 0x32, 0x3c, 0xd3, 0x0f, 0x21, 0x73,
	0xaa, 0x92, 0xd6, 0xf1, 0xaa, 0x41, 0x7d, 0x09, 0x3b, 0x00, 0xde, 0x81, 0x2d, 0x2f, 0x5b, 0x89,
	0x5a, 0x09, 0x0b, 0x01, 0xbd, 0x07, 0x67, 0xd2, 0x98, 0xda, 0xa0, 0xe6, 0x94, 0x11, 0x49, 0x1f,
	0x00, 0x6c, 0x6a, 0x7d, 0xa3, 0x84, 0xd4, 0x1b, 0x89, 0xba, 0x53, 0x76, 0x84, 0xd0, 0x7b, 0xd0,
	0x13, 0x72, 0x9b, 0xf7, 0x91, 0xf0, 0xc7, 0xe2, 0x9f, 0x1e, 0xc0, 0xb5, 0x2c, 0x4b, 0x69, 0x96,
	0xfa, 0xa6, 0xa6, 0x0f, 0x60, 0x80, 0x56, 0x07, 0x28, 0x96, 0x94, 0x55, 0xb6, 0xb1, 0x08, 0x04,
	0xd3, 0x31, 0xfb, 0xc8, 0x74, 0x1f, 0x2b, 0x41, 0x3f, 0x81, 0x51, 0xf8, 0xaf, 0x37, 0xe7, 0x91,
	0x74, 0xd2, 0x60, 0x85, 0x19, 0x3b, 0xf7, 0xff, 0xf7, 0x60, 0xe5, 0x41, 0x5a, 0xc0, 0xd0, 0xee,
	0x53, 0x96, 0x0b, 0xac, 0x36, 0x63, 0xc3, 0x43, 0x86, 0x12, 0x74, 0x06, 0xf4, 0x99, 0xd2, 0x62,
	0xd5, 0x9a, 0xb5, 0xd2, 0xd2, 0x3e, 0x6e, 0xab, 0xb5, 0x34, 0x58, 0x7d, 0xc2, 0x90, 0x71, 0x91,
	0xd1, 0xc8, 0xd0, 0xcf, 0x61, 0x6c, 0xeb, 0x92, 0x9b, 0x2b, 0xae, 0x65, 0xb9, 0x4b, 0x4f, 0x30,
	0x3d, 0x10, 0x0d, 0x12, 0x31, 0x7b, 0x05, 0x54, 0x6a, 0x69, 0x9e, 0x76, 0xab, 0xda, 0x17, 0x3a,
	0xef, 0x56, 0x5d, 0xe3, 0xed, 0xea, 0x4d, 0x07, 0x5f, 0x7d, 0x16, 0xa6, 0xd1, 0xce, 0x0e, 0xae,
	0xcc, 0x2e, 0xef, 0x24, 0x5f, 0x6a, 0x67, 0x3a, 0x36, 0x0c, 0x4f, 0x71, 0xb5, 0xf7, 0x80, 0x3e,
	0x84, 0xfb, 0x25, 0xb7, 0xee, 0x07, 0x0f, 0x72, 0xa7, 0x6a, 0xbd, 0xda, 0x37, 0xb4, 0x8f, 0x4a,
	0x90, 0x7e, 0xba, 0xa7, 0x0f, 0xed, 0xbd, 0x80, 0xcc, 0x53, 0x73, 0x25, 0x96, 0x8b, 0x3c, 0xc3,
	0xdc, 0xd4, 0x03, 0x6b, 0x25, 0x2e, 0x2e, 0xe1, 0xfe, 0x4b, 0x5e, 0xef, 0xbb, 0x79, 0x2b, 0xbb,
	0xd8, 0x24, 0x7f, 0x3c, 0xcc, 0xc9, 0xc9, 0xd1, 0x9c, 0x7c, 0x73, 0xf2, 0x90, 0x14, 0x4b, 0x18,
	0xa0, 0xdf, 0xa1, 0xaa, 0x37, 0xe9, 0x73, 0xf1, 0x37, 0x81, 0x14, 0xa5, 0x28, 0xf1, 0x46, 0xf3,
	0x32, 0x85, 0x51, 0x38, 0xcf, 0x95, 0x88, 0x1d, 0xeb, 0x61, 0xed, 0x11, 0x5e, 0x2b, 0x11, 0xfb,
	0xf5, 0x29, 0x8c, 0x83, 0xd3, 0x4f, 0x5a, 0xae, 0x9d, 0x72, 0xdd, 0x4f, 0xbf, 0xfc, 0x88, 0x63,
	0x43, 0xd8, 0x3b, 0x81, 0xf8, 0x3d, 0x12, 0x74, 0x02, 0x83, 0xc6, 0xa8, 0x8d, 0xbc, 0x92, 0xc6,
	0x27, 0x85, 0xfb, 0x12, 0xa0, 0x46, 0x9a, 0xdb, 0x67, 0xbf, 0xf9, 0x3b, 0x12, 0x9b, 0xef, 0x9b,
	0x9e, 0xa0, 0xa8, 0x88, 0xb8, 0xae, 0x91, 0xc5, 0xbf, 0x04, 0x92, 0x79, 0xdb, 0xcd, 0x71, 0x0a,
	0xdf, 0xc5, 0xea, 0xae, 0x78, 0x57, 0x49, 0xed, 0xbe, 0xab, 0xab, 0x86, 0xeb, 0x9d, 0xe1, 0xe3,
	0xca, 0x36, 0x4d, 0x20, 0x36, 0x81, 0xf0, 0xf6, 0xbb, 0xfa, 0x56, 0xea, 0x58, 0x6a, 0x08, 0xe8,
	0x47, 0x30, 0x6c, 0x9d, 0x2a, 0x95, 0xeb, 0x1e, 0xe1, 0x16, 0x0b, 0x97, 0x22, 0x8b, 0x98, 0x12,
	0x6f, 0xb5, 0x3c, 0xbf, 0x68, 0xb6, 0xbc, 0x54, 0x82, 0x3b, 0x29, 0x70, 0x43, 0xf4, 0xd9, 0x01,
	0x28, 0xfe, 0x3a, 0x81, 0x71, 0x1c, 0x37, 0xc3, 0xb5, 0xf5, 0x4b, 0xb3, 0xd6, 0x6f, 0xa9, 0xcb,
	0x2f, 0x71, 0xfb, 0xf4, 0x95, 0x6e, 0x9f, 0x1d, 0xbb, 0xfd, 0x31, 0x8c, 0xd7, 0x6d, 0x27, 0xcd,
	0xcf, 0xc7, 0x96, 0x27, 0xaf, 0x65, 0x79, 0xfa, 0x3a, 0x96, 0xf7, 0x5f, 0x65, 0x79, 0x76, 0x67,
	0xa2, 0x9e, 0x40, 0xf6, 0x7d, 0x5b, 0x96, 0x2b, 0xd4, 0xf7, 0xbf, 0xcc, 0x54, 0xf1, 0x18, 0x3e,
	0x88, 0x57, 0xf0, 0x4e, 0xb7, 0x2c, 0xfd, 0x12, 0xe0, 0x66, 0xf7, 0x3e, 0x9b, 0x13, 0x5c, 0x6b,
	0xe3, 0xdd, 0x5a, 0xdb, 0x2b, 0x61, 0x98, 0x84, 0x8f, 0xb3, 0xf3, 0xd1, 0xaf, 0xe7, 0xc8, 0x7f,
	0x11, 0x3f, 0xc9, 0xeb, 0xf0, 0x31, 0xfe, 0xfa, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x63, 0x12,
	0x9a, 0x89, 0xa4, 0x07, 0x00, 0x00,
}
